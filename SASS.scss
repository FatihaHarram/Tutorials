/* SYNTACTICALLY AWESOME STYLESHEETS - Element Styling - by Beumsk */


/* change from sass to css; makes the browser able to understand the style; must be done in the command (ruby) */
/* sass SASS.scss CSS.css */

/* SASS and SCSS only difference is in the use or not of '{}' and ',' */


.NESTING-SELECTORS {
  .parent {
    width: 100px;
    .child {
      width: 50px;
    }
  }
}

.NESTING-PROPERTIES {
  border : {
    top: 2px solid black;
    bottom: 1px solid grey;
  }
}

.VARIABLES {
  $translucent-white: rgba(255,255,255,0.3);
  background-color: $translucent-white;
  $header-height: 200px;
  height: $header-height;
  $main-font: 12px Arial bold;
  font: $main-font;
}

.NESTING-PSEUDO-ELEMENTS {
  div {
    color: red;
    &:hover: {
      color: blue;
    }
  }
}

.MIXINS {
  @mixin backface-visibility($visibility: hidden) { /* default value is passed here */
    backface-visibility: $visibility;
    -webkit-backface-visibility: $visibility;
    -moz-backface-visibility: $visibility;
    -ms-backface-visibility: $visibility;
    -o-backface-visibility: $visibility;
  }
  @mixin backface-visibility(hidden);

  @mixin dashed-border($width, $color: #FFF) {
    border: {
      color: $color;
      width: $width;
      style: dashed;
    }
  }
  //only passes non-default argument
  span { @include dashed-border(3px); }
  //passes both arguments
  p { @include dashed-border(3px, green); }
  //passes out of order but explicitly defined
  div { @include dashed-border(color: purple, width: 5px); }
}

.LIST-ARGUMENTS {
  $stripe-properties: to bottom, 15%, blue, white;
  @include stripes($stripe-properties...);
}

.STRING-INTERPOLATION {
  @mixin photo-content($file) {
    content: url(#{$file}.jpg);
  }
  @include photo-content('profile-pic');
}


.SELECTOR-IN-MIXINS {
  @mixin text-hover($color){
    &:hover {
      color: $color; 
    }
  }
  p {
    @include text-hover(red);
  }
}


.COLOR-FUNCTIONS {
  color: red + blue; 
  color: #333 + #f5f5f5;
  color: fade-in(#62fdca, 0.5);
  color: fade-out(#62fdca, 0.5);
  color: adjust-hue(#62fdca, 20%);
}


.ARITHMETIC {
  height: 100px + 10; // 110px
  height: 10px * 5; // 50px
  height: 100px - 10; // 90px
  height: (100) / 10 + 0px; // 10px
}


.EACH-LOOP {
  $list: (orange, purple, teal);
  @each $item in $list {
    .#{$item} {
      background: $item;
    }
  }
}


.FOR-LOOP {
  $total: 10; //Number of .ray divs in our html
  $step: 360deg / $total;
  @for $i from 1 through $total {
    .ray:nth-child(#{$i}) {
      background: adjust-hue(blue, $i * $step);
    }
  }
}


.CONDITIONALS {
  width: if(2 == 2, 50px, 100px); /* condition, if true, if false */
}


.IMPORT-PARTIALS {
  @import "partials-name"; /* note that the real file should use an underscore (_) as prefix */
}


.EXTEND-CLASS { /* better than mixins if there is no argument */
  .original {
    color: pink;
  }
  .extended {
    @extend .original; /*gets pink color from .original */
  }
}


.MULTIPLE-SHADOW {
  $list: -1px -1px #fff;
  $total: 100;
  @for $i from 1 through $total {
    $list: #{$list}, #{$i}px #{$i}px #fff; /* adds shadow layers with a list */
  }
  .object-shadow {
    text-shadow: $list;
  }
}
