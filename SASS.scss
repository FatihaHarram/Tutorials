SYNTACTICALLY AWESOME STYLESHEETS
  -Element Styling
    -by Beumsk


/* change from sass to css; makes the browser able to understand the style; must be done in the command (ruby) */
sass SASS.scss CSS.css


/* nesting selectors */
.parent {
	.child {
		
	}
}

/* nesting properties */
border : {
	top: 2px solid black;
	bottom: 1px solid grey;
}

/* variables */
$translucent-white: rgba(255,255,255,0.3);
background-color: $translucent-white;
$icon-width: 200px;
width: $icon-width;
$main-font: 12px Arial bold;
font: $main-font;

/* nesting pseudo-elements */
div {
	color: red;
	&:hover: {
		color: blue;
	}
}

/* mixins */
@mixin backface-visibility($visibility: hidden) { /* default value is passed here */
  backface-visibility: $visibility;
  -webkit-backface-visibility: $visibility;
  -moz-backface-visibility: $visibility;
  -ms-backface-visibility: $visibility;
  -o-backface-visibility: $visibility;
}
@mixin backface-visibility(hidden);

@mixin dashed-border($width, $color: #FFF) {
  border: {
     color: $color;
     width: $width;
     style: dashed;
  }
}
//only passes non-default argument
span { @include dashed-border(3px); }
//passes both arguments
p { @include dashed-border(3px, green); }
//passes out of order but explicitly defined
div { @include dashed-border(color: purple, width: 5px); }

/* list arguments */
$stripe-properties: to bottom, 15%, blue, white;
@include stripes($stripe-properties...);

/* string interpolation */
@mixin photo-content($file) {
	content: url(#{$file}.jpg);
}
@include photo-content('profile-pic');

/* & selector in mixins */
@mixin text-hover($color){
  &:hover {
      color: $color; 
  }
}
p {
	@include text-hover(red);
}

/* color functions */
color: red + blue; 
color: #333 + #f5f5f5;
color: fade-in(#62fdca, 0.5);
color: fade-out(#62fdca, 0.5);
color: adjust-hue(#62fdca, 20%);

/* arithemtic */
height: 100px + 10;
height: 10px * 5;
height: 100px - 10;
height: (100) / 10 + 0px;
height: 9%2em;

/* each loop */
$list: (orange, purple, teal);
@each $item in $list {
  .#{$item} {
    background: $item;
  }
}

/* for loop */
$total: 10; //Number of .ray divs in our html
$step: 360deg / $total;
@for $i from 1 through $total {
  .ray:nth-child(#{$i}) {
    background: adjust-hue(blue, $i * $step);
   }
}

/* conditionals */





